#!/bin/sh

set -e

case "$1" in
    configure)

	# Make sure scripts are executable        
	chmod +x /usr/sbin/sosetup* || echo "Error making sosetup scripts executable."
	chmod +x /usr/sbin/so-allow* || echo "Error making so-allow script executable."

	# Fix PulledPork config
	/usr/sbin/sosetup-fix-ppconf || echo "Error running /usr/sbin/sosetup-fix-ppconf"

	# Create desktop launcher
	FILE="/usr/share/applications/securityonion-setup.desktop"
	if [ -f $FILE ]; then

		# Iterate across home directories
	        for i in `ls /home/`; do
			# Copy Setup launcher to home directory, but only if user account already exists
			if getent passwd $i >/dev/null 2>&1; then 
				mkdir -p /home/$i/Desktop || echo "Error creating Desktop directory."
				cp $FILE /home/$i/Desktop/ || echo "Error copying $FILE to Desktop directory."
				chown $i:$i /home/$i/Desktop/securityonion-setup.desktop || echo "Error setting ownership of launcher."
			fi
       		done

		# Copy Setup launcher to /etc/skel/Desktop for new users
		mkdir -p /etc/skel/Desktop || echo "Error creating /etc/skel/Desktop"
		cp $FILE /etc/skel/Desktop/ || echo "Error copying $FILE to /etc/skel/Desktop"

		# Make existing launchers executable
		echo -n "Checking for existing Desktop launchers..."
		chmod +x /etc/skel/Desktop/chromium-browser.desktop >/dev/null 2>&1 || echo -n "."
		chmod +x /etc/skel/Desktop/exo-terminal-emulator.desktop >/dev/null 2>&1 || echo -n "."
		chmod +x /etc/skel/Desktop/securityonion*.desktop >/dev/null 2>&1 || echo -n "."
		chmod +x /etc/skel/Desktop/squert.desktop >/dev/null 2>&1 || echo -n "."
		chmod +x /home/*/Desktop/chromium-browser.desktop >/dev/null 2>&1 || echo -n "."
		chmod +x /home/*/Desktop/exo-terminal-emulator.desktop >/dev/null 2>&1 || echo -n "."
		chmod +x /home/*/Desktop/securityonion*.desktop >/dev/null 2>&1 || echo -n "."
		chmod +x /home/*/Desktop/squert.desktop >/dev/null 2>&1 || echo -n "."
		echo
	fi

	# Check for old login.keyring files
	for FILE in /home/*/.local/share/keyrings/login.keyring /etc/skel/.local/share/keyrings/login.keyring; do
		if [ -f $FILE ] ; then
			if [ `sha256sum $FILE | awk '{print $1}'` = "dd2e2e5ad4a7a70d604738c4e3c4843ee5f75c6bf900e0b23518d4c011900274" ]; then 
				echo "Removing old file $FILE."
				rm -f $FILE || echo "Error removing $FILE."
			fi
		fi
	done

	# Check for old user.keystore files
	for FILE in /home/*/.local/share/keyrings/user.keystore /etc/skel/.local/share/keyrings/user.keystore; do
		if [ -f $FILE ] ; then
			if [ `sha256sum $FILE | awk '{print $1}'` = "ec8ec90284d0c10bd9d39eb1f0923c4eacbc0fbd6d3b7dd48ce48b16f848aa4b" ]; then 
				echo "Removing old file $FILE."
				rm -f $FILE || echo "Error removing $FILE."
			fi
		fi
	done

	# Update any old cron entries with new path
	sed -i 's|/usr/bin/sostat|/usr/sbin/sostat|g' /etc/cron.d/* || echo "Error updating cron jobs to use new path."

	# Set MySQL LimitNOFILE if necessary
	DIR=/lib/systemd/system/mysql.service.d
	FILE="$DIR/limit_nofile.conf"
	if [ -f $FILE ]; then 
		echo "$FILE already exists."
	else
		echo "Creating $FILE."
		mkdir -p $DIR
		cat << EOF >> $FILE
[Service]
LimitNOFILE=90000
EOF
	fi

    ;;

    abort-upgrade|abort-remove|abort-deconfigure)
    ;;


    *)
        echo "postinst called with unknown argument \`$1'" >&2
        exit 1
    ;;
esac

# dh_installdeb will replace this with shell code automatically
# generated by other debhelper scripts.

#DEBHELPER#

exit 0
