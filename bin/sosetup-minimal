#!/bin/bash
#
# Copyright 2014,2015,2016,2017,2018,2019,2020 Security Onion Solutions, LLC
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

COMMON="/usr/sbin/so-common"
if ! [ -f $COMMON ]; then
	echo "$COMMON not found."
	echo "This script requires Security Onion 16.04 or later."
	exit
fi
source $COMMON

unset DISPLAY
source /usr/sbin/sosetup-common
TEXT="sosetup-minimal will run the normal sosetup and then reconfigure the Elastic Stack to run in minimal mode.\n\nThis minimal mode is designed to minimize RAM and CPU usage.\n\nThe minimal Logstash config is intended to only do a basic parsing of NIDS and Zeek logs and it won't do any additional decoration or augmentation.\n\nWould you like to proceed?"
promptyesno
ANSWER="$?"
if [ $ANSWER -eq 1 ]; then
	exit
fi

source /usr/sbin/sosetup

function tune() {

	CONF="/etc/nsm/securityonion.conf"
	source $CONF

	# stop elastalert if running
	if docker ps |grep elastalert >/dev/null 2>&1; then
		echo -e "XXX\n10\nPlease wait while stopping elastalert...\nXXX"
		docker stop so-elastalert >/dev/null 2>&1
	fi

	# disable elastalert
	if [ "$ELASTALERT_ENABLED" = "yes" ]; then
		echo -e "XXX\n15\nPlease wait while disabling elastalert...\nXXX"
		sed -i 's|ELASTALERT_ENABLED="yes"|ELASTALERT_ENABLED="no"|g' $CONF
	fi

	# stop freqserver if running
	if docker ps |grep freqserver >/dev/null 2>&1; then
		echo -e "XXX\n20\nPlease wait while stopping freqserver...\nXXX"
		docker stop so-freqserver >/dev/null 2>&1
	fi

	# disable freqserver
	if [ "$FREQ_SERVER_ENABLED" = "yes" ]; then
		echo -e "XXX\n25\nPlease wait while disabling freqserver...\nXXX"
		sed -i 's|FREQ_SERVER_ENABLED="yes"|FREQ_SERVER_ENABLED="no"|g' $CONF
	fi

	# stop domainstats if running
	if docker ps |grep domainstats >/dev/null 2>&1; then
		echo -e "XXX\n30\nPlease wait while stopping domainstats...\nXXX"
		docker stop so-domainstats >/dev/null 2>&1
	fi

	# disable domainstats
	if [ "$DOMAIN_STATS_ENABLED" = "yes" ]; then
		echo -e "XXX\n30\nPlease wait while disabling domainstats...\nXXX"
		sed -i 's|DOMAIN_STATS_ENABLED="yes"|DOMAIN_STATS_ENABLED="no"|g' $CONF
	fi

	# tune elasticsearch if running
	if docker ps |grep elasticsearch >/dev/null 2>&1; then

		echo -e "XXX\n40\nPlease wait while stopping Elasticsearch...\nXXX"
		/usr/sbin/so-elasticsearch-stop >/dev/null 2>&1

		echo -e "XXX\n50\nPlease wait while configuring and restarting Elasticsearch...\nXXX"
		ES_HEAP_SIZE="400m"
		sed -i "s/^-Xms.*/-Xms$ES_HEAP_SIZE/" /etc/elasticsearch/jvm.options
		sed -i "s/^-Xmx.*/-Xmx$ES_HEAP_SIZE/" /etc/elasticsearch/jvm.options
		CLUSTER_NAME=$(grep "cluster.name" /etc/elasticsearch/elasticsearch.yml | tail -1 | cut -d\" -f2)
		rm -f /var/log/elasticsearch/${CLUSTER_NAME}.log
		/usr/sbin/so-elasticsearch-start >/dev/null 2>&1
	fi

	# tune logstash if running
	if docker ps |grep logstash >/dev/null 2>&1; then

		echo -e "XXX\n60\nPlease wait while stopping Logstash...\nXXX"
		/usr/sbin/so-logstash-stop >/dev/null 2>&1

		echo -e "XXX\n70\nPlease wait while configuring and restarting Logstash...\nXXX"
		if ! grep -q "LOGSTASH_MINIMAL" /etc/nsm/securityonion.conf; then
			echo >> /etc/nsm/securityonion.conf
			echo 'LOGSTASH_MINIMAL="yes"' >> /etc/nsm/securityonion.conf
		fi
		LS_HEAP_SIZE="200m"
		sed -i "s/^-Xms.*/-Xms$LS_HEAP_SIZE/" /etc/logstash/jvm.options
		sed -i "s/^-Xmx.*/-Xmx$LS_HEAP_SIZE/" /etc/logstash/jvm.options
		/usr/sbin/so-logstash-start >/dev/null 2>&1

		echo -e "XXX\n80\nPlease wait while services initialize (may be a few minutes)...\nXXX"
		# If logstash outputs to Elasticsearch, we can check Elasticsearch log for initialization
		# Otherwise, logstash is outputting to Redis and we can skip this
		if [ "$LOGSTASH_OUTPUT_REDIS" != "yes" ]; then
			until fgrep -qs "adding template [logstash" /var/log/elasticsearch/${CLUSTER_NAME}.log; do
				sleep 1s
			done
		fi
	fi
}

# Run the tune function and output a progress bar
TEXT="Please wait while making changes to the system..."
tune | whiptail --title="$TITLE" --gauge "$TEXT" 6 75 0

TEXT="sosetup-minimal is now complete!"
whiptail --title="$TITLE" --msgbox "$TEXT" 10 75
