#!/bin/bash
#
# Copyright 2014,2015,2016,2017,2018,2019 Security Onion Solutions, LLC
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Description:
# Configure email for Security Onion

#########################################
# Variables
#########################################
DEBUG="0"
# Create temp log
LOG=`mktemp /tmp/so-email.log.XXXXXXXXXX`
# Get hostname
HOSTNAME=`hostname`
# Get IP address of machine
IP=`ifconfig |grep "inet addr" | awk '{print $2}' |cut -d\: -f2 |grep -v "127.0.0.1" |head -1`
# Set title for Zenity dialog(s)
TITLE="Security Onion Email Setup ($HOSTNAME)"
# Set 'from' address for mail
FROMADDRESS="no-reply"
# Daily sostat mail enabled - YES/NO
SOSTATEMAIL="NO"
# Default sostat confirmation verbiage
SOSTATEMAIL_SUMMARY=" - Daily sostat email will not be configured."
# Bro email enabled - YES/NO
BROEMAIL="NO"
# Default Bro confirmation verbiage
BROEMAIL_SUMMARY=" - Bro email will not be configured."
# OSSEC email enabled - YES/NO
OSSECEMAIL="NO"
# Default OSSEC confirmation verbiage
OSSECEMAIL_SUMMARY=" - OSSEC email will not be configured"
# Sguil email enabled - YES/NO
SGUILEMAIL="NO"
# Default Sguil confirmation verbiage
SGUILEMAIL_SUMMARY=" - Sguil email will not be configured."
# Current version of script/config
CURRENT_CONF_VERSION="1.2"
# Default setting for advanced setup
ADVANCED_SETUP="NO"

# Get notification address from /etc/aliases if it already exists
[ -f /etc/aliases ] && ADMINADDR=`grep -o 'root:.*' /etc/aliases | cut -f2- -d' '`

# Get SMTP server from main.cf if it already exists
if [ -f /etc/postfix/main.cf ];then
	SMTP=`grep -o 'relayhost =.*' /etc/postfix/main.cf | cut -f2- -d'='| cut -f2 -d' '`
else
	SMTP=''
fi 

#########################################
# Got r00t?
#########################################
if [[ $(/usr/bin/id -u) -ne 0 && "$1" != "-w" ]]; then
    echo "Email Setup needs to be run as root.  Please try again using sudo."
    zenity --error --title "$TITLE" --text="Email Setup needs to be run as root.  Please try again using sudo."
    exit
fi

function ask() {
#########################################
# Welcome Screen
#########################################
TEXT="<b>Welcome to Security Onion Email Setup!</b>\n\
\n\
This program will allow you to configure email for Security Onion on $HOSTNAME.\n\
\n\
Please note, this script will install mailutils and Postfix if they are not already installed.
\n\
Would you like to continue?"
YES="Yes, Continue!"
NO="No, Quit."
zenity --question --title="$TITLE" --text="$TEXT" --ok-label="$YES" --cancel-label="$NO" --no-wrap
ANSWER="$?"
if [ $ANSWER -eq 1 ]; then
	[ $DEBUG -eq 1 ] && echo "DEBUG: Clicked No.  Exiting Setup"
        exit 1
else
        [ $DEBUG -eq 1 ] && echo "DEBUG: Clicked Yes.  Continuing Setup."
fi
TEXT="What type of deployment are you currently running?"
COMPONENTS=`zenity --height=300 --list --radiolist --column="1" --column="2" --hide-header --title="$TITLE" --text="$TEXT" TRUE Server FALSE Sensor FALSE Standalone`

case $COMPONENTS in
        Standalone)
                SERVER="1"
                SENSOR="1"
		[ $DEBUG -eq 1 ] && echo "DEBUG: Clicked OK.  Selected Standalone."
                ;;
        Server)
                SERVER="1"
                [ $DEBUG -eq 1 ] && echo "DEBUG: Clicked OK.  Selected Server."
		;;
        Sensor)
                SENSOR="1"
                [ $DEBUG -eq 1 ] && echo "DEBUG: Clicked OK.  Selected Sensor."
		;;
        *)
		[ $DEBUG -eq 1 ] && echo "DEBUG: Clicked Cancel.  Exiting Setup."
                exit 1
		;;
esac
#########################################
# Advanced Setup
#########################################
TEXT="Advanced Setup allows you to specify a different FROM address for each service.  Would you like to use Advanced Setup?"
zenity --question --title="$TITLE" --text="$TEXT" --no-wrap
if [ $? == 0 ]; then
	ADVANCED_SETUP="YES"
fi

#########################################
# Notification Address
#########################################
NOTIFY_CONFIRMED="no"
while [ $NOTIFY_CONFIRMED = "no" ]; do
	TEXT="What would you like to specify for the notification address?"
	NOTIFYADDRESS=`zenity --title="$TITLE" --text="$TEXT" --entry --entry-text="$ADMINADDR"`
	ANSWER="$?"
	if [ $ANSWER -eq 1 ]; then
        	[ $DEBUG -eq 1 ] && echo "DEBUG: Clicked No.  Exiting Setup"
        	exit 1
	else
		if ! [[ "$NOTIFYADDRESS" == ?*@?*.?* ]]; then
                        zenity --error --title "$TITLE" --text="Please provide a valid response\!"
                else
                        [ $DEBUG -eq 1 ] && echo "DEBUG: Clicked Yes.  Configuring notification address."
			NOTIFY_CONFIRMED="yes"
			NOTIFY_SUMMARY=" - Notification address will be set to: $NOTIFYADDRESS"
                fi
	fi
done
#########################################
# Mail server
#########################################
MAILSERVER_CONFIRMED="no"
while [ $MAILSERVER_CONFIRMED = "no" ]; do
	TEXT="What address would you like to specify for the mail (SMTP) server?"
	MAILSERVER=`zenity --title="$TITLE" --text="$TEXT" --entry --entry-text="$SMTP"`
	ANSWER="$?"
	if [ $ANSWER -eq 1 ]; then
        	[ $DEBUG -eq 1 ] && echo "DEBUG: Clicked No.  Exiting Setup"
        	exit 1
	else
		if ! [[ "$MAILSERVER" == ?*.?*.?* ]]; then
                        zenity --error --title "$TITLE" --text="Please provide a valid response\!"
                else
                        [ $DEBUG -eq 1 ] && echo "DEBUG: Clicked Yes.  Configuring SMTP server."
			MAILSERVER_CONFIRMED="yes"
			MAILSERVER_SUMMARY=" - Mail (SMTP) server set to: $MAILSERVER"
                fi
	fi
done
#########################################
# Sostat email
#########################################
TEXT="Would you like to configure daily email for sostat output?"
YES="Yes"
NO="No"
zenity --question --title="$TITLE" --text="$TEXT" --ok-label="$YES" --cancel-label="$NO" --no-wrap
ANSWER="$?"
if [ $ANSWER -eq 1 ]; then
        [ $DEBUG -eq 1 ] && echo "DEBUG: Clicked No.  Not configuring email for sostat output."
else
        [  $DEBUG -eq 1 ] && echo "DEBUG: Clicked Yes.  Configuring sostat email."
	if [ $ADVANCED_SETUP == "YES" ]; then
		SOSTATADDRESS=$(zenity --entry --text "Please enter a FROM email address for sostat" --entry-text "root@localhost")
	else
		SOSTATADDRESS="sostat@$HOSTNAME"
	fi
	SOSTATEMAIL="YES"
	SOSTATEMAIL_SUMMARY=" - Daily sostat email will be configured."
fi
#########################################
# Bro email
#########################################
if [[ $SENSOR -eq 1 ]];then
	TEXT="Would you like to configure email alerts for Bro?"
	YES="Yes"
	NO="No"
	zenity --question --title="$TITLE" --text="$TEXT" --ok-label="$YES" --cancel-label="$NO" --no-wrap
	ANSWER="$?"
	if [ $ANSWER -eq 1 ]; then
        	[ $DEBUG -eq 1 ] && echo "DEBUG: Clicked No.  Not configuring email for Bro."
	else
        	[ $DEBUG -eq 1 ] && echo "DEBUG: Clicked Yes.  Configuring email for Bro."
		if [ $ADVANCED_SETUP == "YES" ]; then
			BROADDRESS=$(zenity --entry --text "Please enter a FROM email address for Bro" --entry-text "root@localhost")
		else
			BROADDRESS="bro@$HOSTNAME"
		fi
		BROEMAIL="YES"
		BROEMAIL_SUMMARY=" - Bro email will be configured."
	fi
fi
#########################################
# Sguil email
#########################################
if [[ $SERVER -eq 1 ]];then
	TEXT="Would you like to configure email alerts for Sguil?"
	YES="Yes"
	NO="No"
	zenity --question --title="$TITLE" --text="$TEXT" --ok-label="$YES" --cancel-label="$NO" --no-wrap
	ANSWER="$?"
	if [ $ANSWER -eq 1 ]; then
        	[ $DEBUG -eq 1 ] && echo "DEBUG: Clicked No.  Not configuring email for Sguil."
	else
        	[ $DEBUG -eq 1 ] && echo "DEBUG: Clicked Yes.  Configuring email for Sguil."
		if [ $ADVANCED_SETUP == "YES" ]; then
			SGUILADDRESS=$(zenity --entry --text "Please enter a FROM email address for Sguil" --entry-text "root@localhost")
		else
			SGUILADDRESS="sguil@$HOSTNAME"
		fi
		SGUILEMAIL="Configured"
		SGUILEMAIL_SUMMARY=" - Sguil email will be configured."
	fi
fi
#########################################
# OSSEC email
#########################################
TEXT="Would you like to configure email alerts for OSSEC?"
YES="Yes"
NO="No"
zenity --question --title="$TITLE" --text="$TEXT" --ok-label="$YES" --cancel-label="$NO" --no-wrap
ANSWER="$?"
if [ $ANSWER -eq 1 ]; then
        [ $DEBUG -eq 1 ] && echo "DEBUG: Clicked No.  Not configuring email for OSSEC."
else
        [ $DEBUG -eq 1 ] && echo "DEBUG: Clicked Yes.  Configuring email for OSSEC."
	if [ $ADVANCED_SETUP == "YES" ]; then
		OSSECADDRESS=$(zenity --entry --text "Please enter a FROM email address for OSSEC" --entry-text "root@localhost")
	else
		OSSECADDRESS="ossec@$HOSTNAME"
	fi
	OSSECEMAIL="YES"
	OSSECEMAIL_SUMMARY=" - OSSEC email will be configured."
fi
#########################################
# Summary
#########################################
TEXT="The following will be configured for $HOSTNAME:\n\
\n\
$NOTIFY_SUMMARY\n\
$MAILSERVER_SUMMARY\n\
$SOSTATEMAIL_SUMMARY\n\
$BROEMAIL_SUMMARY\n\
$SGUILEMAIL_SUMMARY\n\
$OSSECEMAIL_SUMMARY\n\\n\
Please note, services will restart upon confirmation."

YES="Yes, Continue!"
NO="No, Quit."
zenity --question --title="$TITLE" --text="$TEXT" --ok-label="$YES" --cancel-label="$NO" --no-wrap
ANSWER="$?"
if [ $ANSWER -eq 1 ]; then
        [ $DEBUG -eq 1 ] && echo "DEBUG: Clicked No.  Exiting Setup"
	exit 1
else
        [ $DEBUG -eq 1 ] && echo "DEBUG: Clicked Yes.  Configuration confirmed."
fi
}

function MOVELOG() {
# Move log file from /tmp/ to /var/log/nsm/
mv $LOG /var/log/nsm/so-email.log
LOG="/var/log/nsm/so-email.log"
}

#########################################
# Begin function CONFIGURE_EMAIL
#########################################
function CONFIGURE_EMAIL() {

#Check if mailutils installed.  If not, install it.
if dpkg -l | grep -q -i "mailutils"; then
        :
else
	apt-get install -y mailutils >> $LOG 2>&1
fi
if dpkg -l | grep -q -i "postfix"; then
	:
else
	apt-get install -y postfix >> $LOG 2>&1
fi
echo "10"
echo "# Configuring system mail..." | tee -a $LOG
#Configure system 'notification' address
ALIASES="/etc/aliases"
if  grep -q "root:" $ALIASES;then
        sed -i "s|^root:.*$|root: $NOTIFYADDRESS|g" $ALIASES
else
        sed -i "/postmaster/a root: $NOTIFYADDRESS" $ALIASES
fi
newaliases >> $LOG 2>&1
#Configure system from address
POSTFIX="/etc/postfix/main.cf"
#Configure system mail server
sed -i "s|^relayhost = .*$|relayhost = $MAILSERVER|g" $POSTFIX
sed -i "s|^inet_interfaces = .*$|inet_interfaces = loopback-only|g" $POSTFIX
service postfix restart >> $LOG 2>&1
#Configure sostat
if ! [[ "$SOSTATEMAIL" == "NO" ]]; then
	echo "15"
	echo "# Configuring sostat mail..." | tee -a $LOG
	SOSTAT="/etc/cron.d/sostat"
	touch $SOSTAT
	echo -e '#/etc/cron.d/sostat\n#\n#crontab entry to run sostat and email its output\n\n\nSHELL=/bin/sh\nPATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin\nEMAIL=root@localhost\nHOSTNAME='$HOSTNAME'\n\n01 12 * * * root /usr/sbin/sostat 2>&1 | mail -aFrom:'$SOSTATADDRESS' -s "Statistics for $HOSTNAME" $EMAIL' > $SOSTAT
fi
#Configure Bro
if ! [[ "$BROEMAIL" == "NO" ]]; then
	echo "30"
	echo "# Configuring Bro email..." | tee -a $LOG
	BROCTL="/opt/bro/etc/broctl.cfg"
	sed -i "s|^MailTo.*$|MailTo = root@localhost|g" $BROCTL
        if grep -q "tracesummary=" $BROCTL;then
        	sed -i "s|^tracesummary=.*$|tracesummary=|g" $BROCTL
	else
		sed -i '/MailTo/a tracesummary=' $BROCTL
        fi
	LOCALBRO="/opt/bro/share/bro/site/local.bro"
        if grep -q -i "email" $LOCALBRO;then
        	:
        else
        	echo -e "\n# Bro Notice email configuration\nhook Notice::policy(n: Notice::Info)\n             {       \n      add n\$actions[Notice::ACTION_ALARM];\n         }" >> $LOCALBRO
        fi
	BROCFG="/opt/bro/etc/broctl.cfg"
	if ! grep MailFrom $BROCFG; then
		echo 'MailFrom = '"$BROADDRESS"'' >> $BROCFG
	else
		sed -i "s/MailFrom =.*/MailFrom = $BROADDRESS/" $BROCFG
	fi
	nsm_sensor_ps-restart --only-bro >> $LOG 2>&1
fi
#Configure Sguil
if ! [[ "$SGUILEMAIL" == "NO" ]]; then
	echo "45"
	echo "# Configuring Sguil email..." | tee -a $LOG
	SGUILDEMAIL="/etc/nsm/securityonion/sguild.email"
	sed -i "s|^set EMAIL_EVENTS.*$|set EMAIL_EVENTS 1|g" $SGUILDEMAIL
        sed -i "s|^set SMTP.*$|set SMTP_SERVER localhost|g" $SGUILDEMAIL
        sed -i "s|^set EMAIL_RCPT.*$|set EMAIL_RCPT_TO \"root@localhost\"|g" $SGUILDEMAIL
        sed -i "s|^set EMAIL_FROM.*$|set EMAIL_FROM \"$SGUILADDRESS\"|g" $SGUILDEMAIL
	nsm_server_ps-restart >> $LOG 2>&1
fi
#Configure OSSEC
if ! [[ "$OSSECEMAIL" == "NO" ]]; then
	echo "60"
	echo "# Configuring OSSEC email..." | tee -a $LOG
	OSSECCONF="/var/ossec/etc/ossec.conf"
        sed -i 's/.*email_notification.*/     <email_notification>yes<\/email_notification>/' $OSSECCONF
	if grep -q -i "smtp" $OSSECCONF;then
		sed -i 's/.*email_to.*/     <email_to>root@localhost<\/email_to>/' $OSSECCONF
                sed -i 's/.*smtp_server.*/     <smtp_server>localhost<\/smtp_server>/' $OSSECCONF
                sed -i 's/.*email_from.*/     <email_from>'$OSSECADDRESS'<\/email_from>/' $OSSECCONF
                sed -i 's/.*email_maxperhour.*/     <email_maxperhour>20<\/email_maxperhour>/' $OSSECCONF
        else
                sed -i '/.*email_notification.*/ a \     <email_to>root@localhost<\/email_to>' $OSSECCONF
               	sed -i '/.*email_to.*/ a \     <smtp_server>localhost<\/smtp_server>' $OSSECCONF
                sed -i '/.*smtp_server.*/ a \     <email_from>'$OSSECADDRESS'<\/email_from>' $OSSECCONF
                sed -i '/.*email_from.*/ a \     <email_maxperhour>\100\<\/email_maxperhour>' $OSSECCONF
        fi
	service ossec-hids-server restart >> $LOG 2>&1
fi
}
#########################################
# Options
#########################################

usage()
{
cat <<EOF

Security Onion Email Setup

     Options:

        -h              This message
        -f <file>       Configure using answer file <file>

Usage: $0
EOF
}
# Check to see if the user provided an answer file
while getopts "hf:" OPTION
do
     case $OPTION in
         h)
                usage
                exit 0
                ;;
         f)
                ANSWERFILE="$OPTARG"
                # Verify answer file exists and then read it into memory
                if [ ! -f "$ANSWERFILE" ]; then
                        echo "Error accessing $ANSWERFILE"
                        exit 1
                fi
             ;;
     esac
done

# GUI (Zenity) or CLI?
# Default to zenity
OUTPUT="gui"
# If no X11, then fall back to cli
[ -z "$DISPLAY" ] && OUTPUT="cli"
# If user provided an answer file, set to cli
[ -f "$ANSWERFILE" ] && OUTPUT="cli"
# If the user didn't provide an answer file, then ask them the questions
if [ ! -f "$ANSWERFILE" ]; then
        if [ "$OUTPUT" = "gui" ] ; then
                ask
        else
                echo
                echo "No X display found."
                echo
                echo "You'll need to either:"
                echo
                echo "- use SSH X-forwarding (ssh -X)"
                echo
                echo "OR"
                echo
                echo "- use an answer file (sudo so-email -f so-email.conf)"
                echo
                usage
                exit 0
        fi
else
        source "$ANSWERFILE"
        # Check to see if we have the right config file
	if [ "$TYPE" != "EMAIL" ]; then
        	echo
        	echo "Incorrect config file!"  
        	echo "Please copy the correct config file from /usr/share/securityonion/so-email.conf"
        	echo 
        	exit 1;
	else
        	if [ "$VERSION" != "$CURRENT_CONF_VERSION" ]; then
                	echo
                	echo "Version mismatch.  Please check config file!"
                	echo
                	exit 1;
        	fi
	fi
	echo
        echo "Security Onion Email Setup"
        echo
        echo "Ready to configure system using parameters in $ANSWERFILE."
        echo
        echo "WARNING! Continuing will destroy any existing email configuration."
        echo "Are you sure you want to continue?"
        echo "Type yes to continue or anything else to exit."
        read INPUT
        [ "$INPUT" != "yes" ] && exit 0
        echo
fi

if [ "$OUTPUT" = "gui" ]; then
	CONFIGURE_EMAIL |
	zenity --progress --title="$TITLE" --text="Please wait while making changes to the system..." --percentage=0 --auto-close
else
        echo "Please wait while..."
        CONFIGURE_EMAIL | grep --line-buffered "^#" | sed 's|# Please wait while||g'
fi

MOVELOG
########################################
# Setup Complete
########################################
TEXT="Security Onion Email Setup is now complete! \n \
\n\
If you would like to edit the email configuration manually, please refer to:\n
https://securityonion.net/docs/Email\n"
if [ "$OUTPUT" = "gui" ]; then
	zenity --info --title="$TITLE" --text="$TEXT" --no-wrap
else
	echo
	echo "$TEXT" | sed 's|\\n|\n|g' | sed 's|\\||g' | tee -a $LOG
	echo
fi
